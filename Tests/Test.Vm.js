describe('Virtual Machine Integration Tests', function () {
    var vm;
    var bootImage_1 = [
        0x0C, 0x00, 0x00, 0xEA, 0x05, 0x00, 0x00, 0xEA, 0x05, 0x00, 0x00, 0xEA, 0x05, 0x00, 0x00, 0xEA,
        0x05, 0x00, 0x00, 0xEA, 0x00, 0x00, 0xA0, 0xE1, 0x04, 0x00, 0x00, 0xEA, 0x04, 0x00, 0x00, 0xEA,
        0xFE, 0xFF, 0xFF, 0xEA, 0xFE, 0xFF, 0xFF, 0xEA, 0xFE, 0xFF, 0xFF, 0xEA, 0xFE, 0xFF, 0xFF, 0xEA,
        0xFE, 0xFF, 0xFF, 0xEA, 0xFE, 0xFF, 0xFF, 0xEA, 0x01, 0x00, 0xA0, 0xE3, 0x02, 0x10, 0xA0, 0xE3,
        0x03, 0x00, 0x00, 0xEB, 0x00, 0x20, 0xA0, 0xE1, 0x01, 0x00, 0xA0, 0xE1, 0x02, 0x10, 0xA0, 0xE1,
        0xFA, 0xFF, 0xFF, 0xEA, 0x01, 0x00, 0x80, 0xE0, 0x1E, 0xFF, 0x2F, 0xE1
    ];
    beforeEach(function () {
        vm = new ARM.Simulator.Vm(6.9824, [
            new ARM.Simulator.Region(0x00000, 0x4000, null, ARM.Simulator.Region.NoWrite, bootImage_1),
            new ARM.Simulator.Region(0x40000, 0x8000, null, null)
        ]);
    });
    it('Should run', function () {
        var fu = vm;
        console.log(fu.cpu.gpr[0]);
        vm.RunFor(1000);
        console.log(fu.cpu.gpr[1]);
        console.log(', ' + fu.cpu.Cycles);
    });
});
//# sourceMappingURL=Test.Vm.js.map